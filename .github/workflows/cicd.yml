name: CI/CD pipeline
run-name: >
  ${{ github.event_name == 'pull_request' && format('Pipeline is triggered by PR by {0}', github.actor) ||
      github.event_name == 'push' && format('Pipeline is triggered by PUSH by {0}', github.actor) ||
      github.event_name == 'workflow_dispatch' && 'Pipeline is trigger manually.' }}



on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref || github.run_id }}
  cancel-in-progress: true

permissions:
  contents: read

env:
  IMAGE_TAG: uat-${{ github.run_number }}

jobs:
  ci_api:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        run: npm install -g pnpm

      - name: pnpm install
        run: pnpm install --frozen-lockfile

      - name: Type check
        run: pnpm run type-check

      - name: Lint
        run: pnpm run lint

      - name: Type Check (tsc)
        run: pnpm run type-check

  ci_ai:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: pip

      - name: Install uv
        run: pip install --upgrade uv
      
      - name: uv sync
        working-directory: ./ai  
        run: uv sync --all-extras --dev

      - name: Lint
        working-directory: ./ai
        run: make lint

      - name: Format Check
        working-directory: ./ai
        run: make format

  build_api_image:
    # if: ${{ github.ref == 'refs/heads/main' && github.event_name == 'push' }}
    needs: ci_api
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build & push
        uses: docker/build-push-action@v6
        with:
          push: true
          context: .
          file: ./Dockerfile.uat
          tags: ${{ secrets.BACKEND_API_ECR_URI }}:${{ env.IMAGE_TAG }}
          platforms: linux/amd64
          provenance: false

  build_ai_image:
    # if: ${{ github.ref == 'refs/heads/main' && github.event_name == 'push' }}
    needs: ci_ai
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build & push
        uses: docker/build-push-action@v6
        with:
          push: true
          context: .
          file: ./ai/Dockerfile.uat
          tags: ${{ secrets.BACKEND_AI_ECR_URI }}:${{ env.IMAGE_TAG }}
          platforms: linux/amd64
          provenance: false

  # cd:
  #   needs: build_api_image
  #   if: ${{ github.ref == 'refs/heads/main' && github.event_name == 'push' }}
  #   runs-on: ubuntu-latest
  #   permissions:
  #     id-token: write
  #     contents: read
  #   steps:
  #     - name: Configure AWS credentials (OIDC)
  #       uses: aws-actions/configure-aws-credentials@v4
  #       with:
  #         role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
  #         aws-region: ${{ secrets.AWS_REGION }}

  #     - name: Ensure jq installed Install jq (ensure present)
  #       run: |
  #         if ! command -v jq >/dev/null 2>&1; then
  #           echo "jq not found, installing..."
  #           sudo apt-get update && sudo apt-get install -y jq
  #         else
  #           echo "jq already installed"
  #         fi
      
  #     - name: Deploy via SSM SendCommand
  #       id: ssm
  #       run: |
  #         aws ssm send-command \
  #           --document-name "AWS-RunShellScript" \
  #           --comment "GitHub Actions deploy ${{ secrets.FRONTEND_ECR }}:${{ env.IMAGE_TAG }}." \
  #           --parameters "commands=['sudo bash /home/ubuntu/devops/deploy-frontend.sh ${{ env.IMAGE_TAG }}']" \
  #           --instance-ids "${{ secrets.EC2_INSTANCE_ID }}" \
  #           --region "${{ secrets.AWS_REGION }}" \
  #           --output json > ssm.json

  #         cat ssm.json
  #         COMMAND_ID=$(jq -r '.Command.CommandId' ssm.json)
  #         echo "COMMAND_ID=$COMMAND_ID" >> $GITHUB_OUTPUT
