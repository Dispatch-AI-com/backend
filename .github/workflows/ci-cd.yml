name: CI/CD pipeline (API)
run-name: >
  ${{ github.event_name == 'pull_request' && format('API CI by {0}', github.actor) ||
      github.event_name == 'push' && format('API CI/CD (push) by {0}', github.actor) ||
      github.event_name == 'workflow_dispatch' && 'API pipeline (manual)' }}

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      mode:
        description: "Choose pipeline mode"
        type: choice
        options: [ci, cicd]
        default: cicd
        required: true

concurrency:
  group: ${{ github.workflow }}-${{ github.ref || github.run_id }}
  cancel-in-progress: true

permissions:
  contents: read
  id-token: write  # for AWS OIDC

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  # 你的后端 ECR 仓库（例如：123456789012.dkr.ecr.ap-southeast-2.amazonaws.com/dispatchai-api）
  ECR_API_REPO: ${{ secrets.BACKEND_API_ECR_URI }}
  IMAGE_UAT: uat-latest
  IMAGE_TAG: uat-${{ github.run_number }} # 或者用 sha-${{ github.sha }}

jobs:
  ci_api:
    runs-on: ubuntu-latest
    # PR、push main、手动（ci/cicd）都跑 CI
    if: ${{ github.event_name == 'pull_request' || github.event_name == 'push' || inputs.mode == 'ci' || inputs.mode == 'cicd' }}

    services:
      mongodb:
        image: mongo:latest
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand({ping:1})'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # 先装 pnpm，保证可执行
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
          cache-dependency-path: pnpm-lock.yaml

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Type check
        run: pnpm run type-check

      - name: Lint
        run: pnpm run lint

      - name: Run Unit & Integration Tests
        env:
          CI: true
        run: pnpm test:ci -- --passWithNoTests

      # 可选：如果 Dockerfile 需要 COPY dist（而不是在镜像内 build），才需要这两步
      # - name: Build (only if Dockerfile copies dist)
      #   if: ${{ (github.event_name == 'push' && github.ref == 'refs/heads/main') || (github.event_name == 'workflow_dispatch' && inputs.mode == 'cicd') }}
      #   run: pnpm build
      #
      # - name: Upload backend artifact (dist)
      #   if: ${{ (github.event_name == 'push' && github.ref == 'refs/heads/main') || (github.event_name == 'workflow_dispatch' && inputs.mode == 'cicd') }}
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: api-dist
      #     path: |
      #       dist/**
      #       package.json
      #       pnpm-lock.yaml
      #     include-hidden-files: true
      #     retention-days: 1

  build_api_image:
    # 仅 main push 或手动 cicd 时构建并推镜像（PR 不推）
    if: ${{ (github.event_name == 'push' && github.ref == 'refs/heads/main') || (github.event_name == 'workflow_dispatch' && inputs.mode == 'cicd') }}
    needs: ci_api
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # 若你的 Dockerfile 需要 COPY dist，请在这里下载上一步的 artifact
      # - name: Download API artifact (dist)
      #   uses: actions/download-artifact@v4
      #   with:
      #     name: api-dist
      #     path: .  # 解压到仓库根，Dockerfile 可 COPY dist

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: "Build & push API image (uat-latest + run tag)"
        uses: docker/build-push-action@v6
        with:
          push: true
          context: .
          file: ./Dockerfile.uat
          tags: |
            ${{ env.ECR_API_REPO }}:${{ env.IMAGE_UAT }}
            ${{ env.ECR_API_REPO }}:${{ env.IMAGE_TAG }}
          platforms: linux/amd64
          provenance: false

  cd:
    name: Deploy to UAT via SSM
    needs: build_api_image
    if: ${{ (github.event_name == 'push' && github.ref == 'refs/heads/main') || (github.event_name == 'workflow_dispatch' && inputs.mode == 'cicd') }}
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy via SSM SendCommand
        run: |
          aws ssm send-command \
            --document-name "AWS-RunShellScript" \
            --comment "GitHub Actions deploy Backend Image: ${{ env.IMAGE_TAG }}" \
            --parameters '{
              "workingDirectory": ["/home/ubuntu/devops/deploy"],
              "commands": ["sudo bash ./deploy]()
